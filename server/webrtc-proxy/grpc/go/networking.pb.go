// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: networking.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Stats_ICEType int32

const (
	Stats_Unknown Stats_ICEType = 0
	Stats_Host    Stats_ICEType = 1
	Stats_Srflx   Stats_ICEType = 2
	Stats_Prflx   Stats_ICEType = 3
	Stats_Relay   Stats_ICEType = 4
)

// Enum value maps for Stats_ICEType.
var (
	Stats_ICEType_name = map[int32]string{
		0: "Unknown",
		1: "Host",
		2: "Srflx",
		3: "Prflx",
		4: "Relay",
	}
	Stats_ICEType_value = map[string]int32{
		"Unknown": 0,
		"Host":    1,
		"Srflx":   2,
		"Prflx":   3,
		"Relay":   4,
	}
)

func (x Stats_ICEType) Enum() *Stats_ICEType {
	p := new(Stats_ICEType)
	*p = x
	return p
}

func (x Stats_ICEType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stats_ICEType) Descriptor() protoreflect.EnumDescriptor {
	return file_networking_proto_enumTypes[0].Descriptor()
}

func (Stats_ICEType) Type() protoreflect.EnumType {
	return &file_networking_proto_enumTypes[0]
}

func (x Stats_ICEType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type NamedTrack struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TrackId     *string                `protobuf:"bytes,1,opt,name=track_id,json=trackId"`
	xxx_hidden_StreamId    *string                `protobuf:"bytes,2,opt,name=stream_id,json=streamId"`
	xxx_hidden_MimeType    *string                `protobuf:"bytes,3,opt,name=mime_type,json=mimeType"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NamedTrack) Reset() {
	*x = NamedTrack{}
	mi := &file_networking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedTrack) ProtoMessage() {}

func (x *NamedTrack) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NamedTrack) GetTrackId() string {
	if x != nil {
		if x.xxx_hidden_TrackId != nil {
			return *x.xxx_hidden_TrackId
		}
		return ""
	}
	return ""
}

func (x *NamedTrack) GetStreamId() string {
	if x != nil {
		if x.xxx_hidden_StreamId != nil {
			return *x.xxx_hidden_StreamId
		}
		return ""
	}
	return ""
}

func (x *NamedTrack) GetMimeType() string {
	if x != nil {
		if x.xxx_hidden_MimeType != nil {
			return *x.xxx_hidden_MimeType
		}
		return ""
	}
	return ""
}

func (x *NamedTrack) SetTrackId(v string) {
	x.xxx_hidden_TrackId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *NamedTrack) SetStreamId(v string) {
	x.xxx_hidden_StreamId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *NamedTrack) SetMimeType(v string) {
	x.xxx_hidden_MimeType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *NamedTrack) HasTrackId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *NamedTrack) HasStreamId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *NamedTrack) HasMimeType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *NamedTrack) ClearTrackId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_TrackId = nil
}

func (x *NamedTrack) ClearStreamId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_StreamId = nil
}

func (x *NamedTrack) ClearMimeType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_MimeType = nil
}

type NamedTrack_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TrackId  *string
	StreamId *string
	MimeType *string
}

func (b0 NamedTrack_builder) Build() *NamedTrack {
	m0 := &NamedTrack{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TrackId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_TrackId = b.TrackId
	}
	if b.StreamId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_StreamId = b.StreamId
	}
	if b.MimeType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_MimeType = b.MimeType
	}
	return m0
}

// uuid can be any string that uniquely identifies the sender/receiver. No specific format required.
// Define the transmitter (T) as the side with a dest_uuid (in either Data or Media Transmission) that refers to the broadcaster (B).
// In the case that both sides have specified dest_uuid that refer to each other, the side that initiates first is T.
// Offer negotiations is as follows:
// 1. T -> T's Media -> B (Request)
// 2. B -> Wanted T's Media, B's Media -> T (Response)
// 3. T -> Wanted B's Media, Wanted T's Media, SDP offer, type -> B (Request)
// 4. B -> Wanted B's Media, Wanted T's Media, SDP answer, type -> T (Response)
// 5. Connection Established. T -> Wanted T's Media -> B; B -> Wanted B's Media -> T
type WebrtcOffer struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SrcUuid         *string                `protobuf:"bytes,1,opt,name=src_uuid,json=srcUuid"`
	xxx_hidden_Sdp             *string                `protobuf:"bytes,2,opt,name=sdp"`
	xxx_hidden_Type            *string                `protobuf:"bytes,3,opt,name=type"`
	xxx_hidden_LocalTracks     *[]*NamedTrack         `protobuf:"bytes,4,rep,name=local_tracks,json=localTracks"`
	xxx_hidden_LocalTracksSet  bool                   `protobuf:"varint,5,opt,name=local_tracks_set,json=localTracksSet"`
	xxx_hidden_RemoteTracks    *[]*NamedTrack         `protobuf:"bytes,6,rep,name=remote_tracks,json=remoteTracks"`
	xxx_hidden_RemoteTracksSet bool                   `protobuf:"varint,7,opt,name=remote_tracks_set,json=remoteTracksSet"`
	xxx_hidden_Datachannel     bool                   `protobuf:"varint,8,opt,name=datachannel"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *WebrtcOffer) Reset() {
	*x = WebrtcOffer{}
	mi := &file_networking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcOffer) ProtoMessage() {}

func (x *WebrtcOffer) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcOffer) GetSrcUuid() string {
	if x != nil {
		if x.xxx_hidden_SrcUuid != nil {
			return *x.xxx_hidden_SrcUuid
		}
		return ""
	}
	return ""
}

func (x *WebrtcOffer) GetSdp() string {
	if x != nil {
		if x.xxx_hidden_Sdp != nil {
			return *x.xxx_hidden_Sdp
		}
		return ""
	}
	return ""
}

func (x *WebrtcOffer) GetType() string {
	if x != nil {
		if x.xxx_hidden_Type != nil {
			return *x.xxx_hidden_Type
		}
		return ""
	}
	return ""
}

func (x *WebrtcOffer) GetLocalTracks() []*NamedTrack {
	if x != nil {
		if x.xxx_hidden_LocalTracks != nil {
			return *x.xxx_hidden_LocalTracks
		}
	}
	return nil
}

func (x *WebrtcOffer) GetLocalTracksSet() bool {
	if x != nil {
		return x.xxx_hidden_LocalTracksSet
	}
	return false
}

func (x *WebrtcOffer) GetRemoteTracks() []*NamedTrack {
	if x != nil {
		if x.xxx_hidden_RemoteTracks != nil {
			return *x.xxx_hidden_RemoteTracks
		}
	}
	return nil
}

func (x *WebrtcOffer) GetRemoteTracksSet() bool {
	if x != nil {
		return x.xxx_hidden_RemoteTracksSet
	}
	return false
}

func (x *WebrtcOffer) GetDatachannel() bool {
	if x != nil {
		return x.xxx_hidden_Datachannel
	}
	return false
}

func (x *WebrtcOffer) SetSrcUuid(v string) {
	x.xxx_hidden_SrcUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *WebrtcOffer) SetSdp(v string) {
	x.xxx_hidden_Sdp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 8)
}

func (x *WebrtcOffer) SetType(v string) {
	x.xxx_hidden_Type = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *WebrtcOffer) SetLocalTracks(v []*NamedTrack) {
	x.xxx_hidden_LocalTracks = &v
}

func (x *WebrtcOffer) SetLocalTracksSet(v bool) {
	x.xxx_hidden_LocalTracksSet = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 8)
}

func (x *WebrtcOffer) SetRemoteTracks(v []*NamedTrack) {
	x.xxx_hidden_RemoteTracks = &v
}

func (x *WebrtcOffer) SetRemoteTracksSet(v bool) {
	x.xxx_hidden_RemoteTracksSet = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 8)
}

func (x *WebrtcOffer) SetDatachannel(v bool) {
	x.xxx_hidden_Datachannel = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 8)
}

func (x *WebrtcOffer) HasSrcUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WebrtcOffer) HasSdp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *WebrtcOffer) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *WebrtcOffer) HasLocalTracksSet() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *WebrtcOffer) HasRemoteTracksSet() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *WebrtcOffer) HasDatachannel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *WebrtcOffer) ClearSrcUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SrcUuid = nil
}

func (x *WebrtcOffer) ClearSdp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Sdp = nil
}

func (x *WebrtcOffer) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Type = nil
}

func (x *WebrtcOffer) ClearLocalTracksSet() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_LocalTracksSet = false
}

func (x *WebrtcOffer) ClearRemoteTracksSet() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_RemoteTracksSet = false
}

func (x *WebrtcOffer) ClearDatachannel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Datachannel = false
}

type WebrtcOffer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SrcUuid         *string
	Sdp             *string
	Type            *string
	LocalTracks     []*NamedTrack
	LocalTracksSet  *bool
	RemoteTracks    []*NamedTrack
	RemoteTracksSet *bool
	Datachannel     *bool
}

func (b0 WebrtcOffer_builder) Build() *WebrtcOffer {
	m0 := &WebrtcOffer{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SrcUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_SrcUuid = b.SrcUuid
	}
	if b.Sdp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 8)
		x.xxx_hidden_Sdp = b.Sdp
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_Type = b.Type
	}
	x.xxx_hidden_LocalTracks = &b.LocalTracks
	if b.LocalTracksSet != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 8)
		x.xxx_hidden_LocalTracksSet = *b.LocalTracksSet
	}
	x.xxx_hidden_RemoteTracks = &b.RemoteTracks
	if b.RemoteTracksSet != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 8)
		x.xxx_hidden_RemoteTracksSet = *b.RemoteTracksSet
	}
	if b.Datachannel != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 8)
		x.xxx_hidden_Datachannel = *b.Datachannel
	}
	return m0
}

type DataChannel struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SrcUuid     *string                `protobuf:"bytes,1,opt,name=src_uuid,json=srcUuid"`
	xxx_hidden_DestUuid    *string                `protobuf:"bytes,2,opt,name=dest_uuid,json=destUuid"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DataChannel) Reset() {
	*x = DataChannel{}
	mi := &file_networking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChannel) ProtoMessage() {}

func (x *DataChannel) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DataChannel) GetSrcUuid() string {
	if x != nil {
		if x.xxx_hidden_SrcUuid != nil {
			return *x.xxx_hidden_SrcUuid
		}
		return ""
	}
	return ""
}

func (x *DataChannel) GetDestUuid() string {
	if x != nil {
		if x.xxx_hidden_DestUuid != nil {
			return *x.xxx_hidden_DestUuid
		}
		return ""
	}
	return ""
}

func (x *DataChannel) SetSrcUuid(v string) {
	x.xxx_hidden_SrcUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *DataChannel) SetDestUuid(v string) {
	x.xxx_hidden_DestUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DataChannel) HasSrcUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DataChannel) HasDestUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DataChannel) ClearSrcUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SrcUuid = nil
}

func (x *DataChannel) ClearDestUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_DestUuid = nil
}

type DataChannel_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SrcUuid  *string
	DestUuid *string
}

func (b0 DataChannel_builder) Build() *DataChannel {
	m0 := &DataChannel{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SrcUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_SrcUuid = b.SrcUuid
	}
	if b.DestUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_DestUuid = b.DestUuid
	}
	return m0
}

type DataTransmission struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Channel     *DataChannel           `protobuf:"bytes,1,opt,name=channel"`
	xxx_hidden_Payload     []byte                 `protobuf:"bytes,2,opt,name=payload"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DataTransmission) Reset() {
	*x = DataTransmission{}
	mi := &file_networking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataTransmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransmission) ProtoMessage() {}

func (x *DataTransmission) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DataTransmission) GetChannel() *DataChannel {
	if x != nil {
		return x.xxx_hidden_Channel
	}
	return nil
}

func (x *DataTransmission) GetPayload() []byte {
	if x != nil {
		return x.xxx_hidden_Payload
	}
	return nil
}

func (x *DataTransmission) SetChannel(v *DataChannel) {
	x.xxx_hidden_Channel = v
}

func (x *DataTransmission) SetPayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Payload = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DataTransmission) HasChannel() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Channel != nil
}

func (x *DataTransmission) HasPayload() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DataTransmission) ClearChannel() {
	x.xxx_hidden_Channel = nil
}

func (x *DataTransmission) ClearPayload() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Payload = nil
}

type DataTransmission_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Channel *DataChannel
	Payload []byte
}

func (b0 DataTransmission_builder) Build() *DataTransmission {
	m0 := &DataTransmission{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Channel = b.Channel
	if b.Payload != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Payload = b.Payload
	}
	return m0
}

type MediaChannel struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SrcUuid       *string                `protobuf:"bytes,1,opt,name=src_uuid,json=srcUuid"`
	xxx_hidden_DestUuid      *string                `protobuf:"bytes,2,opt,name=dest_uuid,json=destUuid"`
	xxx_hidden_Track         *NamedTrack            `protobuf:"bytes,3,opt,name=track"`
	xxx_hidden_LocalhostPort uint32                 `protobuf:"varint,4,opt,name=localhost_port,json=localhostPort"`
	xxx_hidden_Close         bool                   `protobuf:"varint,5,opt,name=close"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *MediaChannel) Reset() {
	*x = MediaChannel{}
	mi := &file_networking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaChannel) ProtoMessage() {}

func (x *MediaChannel) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MediaChannel) GetSrcUuid() string {
	if x != nil {
		if x.xxx_hidden_SrcUuid != nil {
			return *x.xxx_hidden_SrcUuid
		}
		return ""
	}
	return ""
}

func (x *MediaChannel) GetDestUuid() string {
	if x != nil {
		if x.xxx_hidden_DestUuid != nil {
			return *x.xxx_hidden_DestUuid
		}
		return ""
	}
	return ""
}

func (x *MediaChannel) GetTrack() *NamedTrack {
	if x != nil {
		return x.xxx_hidden_Track
	}
	return nil
}

func (x *MediaChannel) GetLocalhostPort() uint32 {
	if x != nil {
		return x.xxx_hidden_LocalhostPort
	}
	return 0
}

func (x *MediaChannel) GetClose() bool {
	if x != nil {
		return x.xxx_hidden_Close
	}
	return false
}

func (x *MediaChannel) SetSrcUuid(v string) {
	x.xxx_hidden_SrcUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *MediaChannel) SetDestUuid(v string) {
	x.xxx_hidden_DestUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *MediaChannel) SetTrack(v *NamedTrack) {
	x.xxx_hidden_Track = v
}

func (x *MediaChannel) SetLocalhostPort(v uint32) {
	x.xxx_hidden_LocalhostPort = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *MediaChannel) SetClose(v bool) {
	x.xxx_hidden_Close = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *MediaChannel) HasSrcUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *MediaChannel) HasDestUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *MediaChannel) HasTrack() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Track != nil
}

func (x *MediaChannel) HasLocalhostPort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *MediaChannel) HasClose() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *MediaChannel) ClearSrcUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SrcUuid = nil
}

func (x *MediaChannel) ClearDestUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_DestUuid = nil
}

func (x *MediaChannel) ClearTrack() {
	x.xxx_hidden_Track = nil
}

func (x *MediaChannel) ClearLocalhostPort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_LocalhostPort = 0
}

func (x *MediaChannel) ClearClose() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Close = false
}

type MediaChannel_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SrcUuid  *string
	DestUuid *string
	// When sent from the kernel, this will be fulfilled on a best-effort basis. The dest can reject any track it doesn't want.
	Track         *NamedTrack
	LocalhostPort *uint32
	Close         *bool
}

func (b0 MediaChannel_builder) Build() *MediaChannel {
	m0 := &MediaChannel{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SrcUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_SrcUuid = b.SrcUuid
	}
	if b.DestUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_DestUuid = b.DestUuid
	}
	x.xxx_hidden_Track = b.Track
	if b.LocalhostPort != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_LocalhostPort = *b.LocalhostPort
	}
	if b.Close != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_Close = *b.Close
	}
	return m0
}

type Stats struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_DestUuid        *string                `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid"`
	xxx_hidden_CumulativeRtt   float64                `protobuf:"fixed64,2,opt,name=cumulative_rtt,json=cumulativeRtt"`
	xxx_hidden_CurrentRtt      float64                `protobuf:"fixed64,3,opt,name=current_rtt,json=currentRtt"`
	xxx_hidden_OutgoingBitrate float64                `protobuf:"fixed64,4,opt,name=outgoing_bitrate,json=outgoingBitrate"`
	xxx_hidden_IncomingBitrate float64                `protobuf:"fixed64,5,opt,name=incoming_bitrate,json=incomingBitrate"`
	xxx_hidden_Protocol        *string                `protobuf:"bytes,6,opt,name=protocol"`
	xxx_hidden_Type            Stats_ICEType          `protobuf:"varint,7,opt,name=type,enum=networking.Stats_ICEType"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Stats) Reset() {
	*x = Stats{}
	mi := &file_networking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Stats) GetDestUuid() string {
	if x != nil {
		if x.xxx_hidden_DestUuid != nil {
			return *x.xxx_hidden_DestUuid
		}
		return ""
	}
	return ""
}

func (x *Stats) GetCumulativeRtt() float64 {
	if x != nil {
		return x.xxx_hidden_CumulativeRtt
	}
	return 0
}

func (x *Stats) GetCurrentRtt() float64 {
	if x != nil {
		return x.xxx_hidden_CurrentRtt
	}
	return 0
}

func (x *Stats) GetOutgoingBitrate() float64 {
	if x != nil {
		return x.xxx_hidden_OutgoingBitrate
	}
	return 0
}

func (x *Stats) GetIncomingBitrate() float64 {
	if x != nil {
		return x.xxx_hidden_IncomingBitrate
	}
	return 0
}

func (x *Stats) GetProtocol() string {
	if x != nil {
		if x.xxx_hidden_Protocol != nil {
			return *x.xxx_hidden_Protocol
		}
		return ""
	}
	return ""
}

func (x *Stats) GetType() Stats_ICEType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 6) {
			return x.xxx_hidden_Type
		}
	}
	return Stats_Unknown
}

func (x *Stats) SetDestUuid(v string) {
	x.xxx_hidden_DestUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *Stats) SetCumulativeRtt(v float64) {
	x.xxx_hidden_CumulativeRtt = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *Stats) SetCurrentRtt(v float64) {
	x.xxx_hidden_CurrentRtt = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *Stats) SetOutgoingBitrate(v float64) {
	x.xxx_hidden_OutgoingBitrate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *Stats) SetIncomingBitrate(v float64) {
	x.xxx_hidden_IncomingBitrate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *Stats) SetProtocol(v string) {
	x.xxx_hidden_Protocol = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *Stats) SetType(v Stats_ICEType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *Stats) HasDestUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Stats) HasCumulativeRtt() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Stats) HasCurrentRtt() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Stats) HasOutgoingBitrate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Stats) HasIncomingBitrate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Stats) HasProtocol() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Stats) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *Stats) ClearDestUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_DestUuid = nil
}

func (x *Stats) ClearCumulativeRtt() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CumulativeRtt = 0
}

func (x *Stats) ClearCurrentRtt() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_CurrentRtt = 0
}

func (x *Stats) ClearOutgoingBitrate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_OutgoingBitrate = 0
}

func (x *Stats) ClearIncomingBitrate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_IncomingBitrate = 0
}

func (x *Stats) ClearProtocol() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Protocol = nil
}

func (x *Stats) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Type = Stats_Unknown
}

type Stats_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	DestUuid        *string
	CumulativeRtt   *float64
	CurrentRtt      *float64
	OutgoingBitrate *float64
	IncomingBitrate *float64
	Protocol        *string
	Type            *Stats_ICEType
}

func (b0 Stats_builder) Build() *Stats {
	m0 := &Stats{}
	b, x := &b0, m0
	_, _ = b, x
	if b.DestUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_DestUuid = b.DestUuid
	}
	if b.CumulativeRtt != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_CumulativeRtt = *b.CumulativeRtt
	}
	if b.CurrentRtt != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_CurrentRtt = *b.CurrentRtt
	}
	if b.OutgoingBitrate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_OutgoingBitrate = *b.OutgoingBitrate
	}
	if b.IncomingBitrate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_IncomingBitrate = *b.IncomingBitrate
	}
	if b.Protocol != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_Protocol = b.Protocol
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_Type = *b.Type
	}
	return m0
}

type Event struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Event isEvent_Event          `protobuf_oneof:"event"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_networking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Event) GetData() *DataTransmission {
	if x != nil {
		if x, ok := x.xxx_hidden_Event.(*event_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *Event) GetMedia() *MediaChannel {
	if x != nil {
		if x, ok := x.xxx_hidden_Event.(*event_Media); ok {
			return x.Media
		}
	}
	return nil
}

func (x *Event) GetAchievedState() *State {
	if x != nil {
		if x, ok := x.xxx_hidden_Event.(*event_AchievedState); ok {
			return x.AchievedState
		}
	}
	return nil
}

func (x *Event) GetStats() *Stats {
	if x != nil {
		if x, ok := x.xxx_hidden_Event.(*event_Stats); ok {
			return x.Stats
		}
	}
	return nil
}

func (x *Event) SetData(v *DataTransmission) {
	if v == nil {
		x.xxx_hidden_Event = nil
		return
	}
	x.xxx_hidden_Event = &event_Data{v}
}

func (x *Event) SetMedia(v *MediaChannel) {
	if v == nil {
		x.xxx_hidden_Event = nil
		return
	}
	x.xxx_hidden_Event = &event_Media{v}
}

func (x *Event) SetAchievedState(v *State) {
	if v == nil {
		x.xxx_hidden_Event = nil
		return
	}
	x.xxx_hidden_Event = &event_AchievedState{v}
}

func (x *Event) SetStats(v *Stats) {
	if v == nil {
		x.xxx_hidden_Event = nil
		return
	}
	x.xxx_hidden_Event = &event_Stats{v}
}

func (x *Event) HasEvent() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Event != nil
}

func (x *Event) HasData() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Event.(*event_Data)
	return ok
}

func (x *Event) HasMedia() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Event.(*event_Media)
	return ok
}

func (x *Event) HasAchievedState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Event.(*event_AchievedState)
	return ok
}

func (x *Event) HasStats() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Event.(*event_Stats)
	return ok
}

func (x *Event) ClearEvent() {
	x.xxx_hidden_Event = nil
}

func (x *Event) ClearData() {
	if _, ok := x.xxx_hidden_Event.(*event_Data); ok {
		x.xxx_hidden_Event = nil
	}
}

func (x *Event) ClearMedia() {
	if _, ok := x.xxx_hidden_Event.(*event_Media); ok {
		x.xxx_hidden_Event = nil
	}
}

func (x *Event) ClearAchievedState() {
	if _, ok := x.xxx_hidden_Event.(*event_AchievedState); ok {
		x.xxx_hidden_Event = nil
	}
}

func (x *Event) ClearStats() {
	if _, ok := x.xxx_hidden_Event.(*event_Stats); ok {
		x.xxx_hidden_Event = nil
	}
}

const Event_Event_not_set_case case_Event_Event = 0
const Event_Data_case case_Event_Event = 1
const Event_Media_case case_Event_Event = 2
const Event_AchievedState_case case_Event_Event = 3
const Event_Stats_case case_Event_Event = 4

func (x *Event) WhichEvent() case_Event_Event {
	if x == nil {
		return Event_Event_not_set_case
	}
	switch x.xxx_hidden_Event.(type) {
	case *event_Data:
		return Event_Data_case
	case *event_Media:
		return Event_Media_case
	case *event_AchievedState:
		return Event_AchievedState_case
	case *event_Stats:
		return Event_Stats_case
	default:
		return Event_Event_not_set_case
	}
}

type Event_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Event:
	Data          *DataTransmission
	Media         *MediaChannel
	AchievedState *State
	Stats         *Stats
	// -- end of xxx_hidden_Event
}

func (b0 Event_builder) Build() *Event {
	m0 := &Event{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Data != nil {
		x.xxx_hidden_Event = &event_Data{b.Data}
	}
	if b.Media != nil {
		x.xxx_hidden_Event = &event_Media{b.Media}
	}
	if b.AchievedState != nil {
		x.xxx_hidden_Event = &event_AchievedState{b.AchievedState}
	}
	if b.Stats != nil {
		x.xxx_hidden_Event = &event_Stats{b.Stats}
	}
	return m0
}

type case_Event_Event protoreflect.FieldNumber

func (x case_Event_Event) String() string {
	md := file_networking_proto_msgTypes[6].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isEvent_Event interface {
	isEvent_Event()
}

type event_Data struct {
	Data *DataTransmission `protobuf:"bytes,1,opt,name=data,oneof"`
}

type event_Media struct {
	Media *MediaChannel `protobuf:"bytes,2,opt,name=media,oneof"`
}

type event_AchievedState struct {
	AchievedState *State `protobuf:"bytes,3,opt,name=achievedState,oneof"`
}

type event_Stats struct {
	Stats *Stats `protobuf:"bytes,4,opt,name=stats,oneof"`
}

func (*event_Data) isEvent_Event() {}

func (*event_Media) isEvent_Event() {}

func (*event_AchievedState) isEvent_Event() {}

func (*event_Stats) isEvent_Event() {}

type WebrtcConfig struct {
	state                  protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_IceServers  *[]*WebrtcConfig_IceServer   `protobuf:"bytes,1,rep,name=ice_servers,json=iceServers"`
	xxx_hidden_Credentials map[string]*WebrtcConfigAuth `protobuf:"bytes,2,rep,name=credentials" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WebrtcConfig) Reset() {
	*x = WebrtcConfig{}
	mi := &file_networking_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcConfig) ProtoMessage() {}

func (x *WebrtcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcConfig) GetIceServers() []*WebrtcConfig_IceServer {
	if x != nil {
		if x.xxx_hidden_IceServers != nil {
			return *x.xxx_hidden_IceServers
		}
	}
	return nil
}

func (x *WebrtcConfig) GetCredentials() map[string]*WebrtcConfigAuth {
	if x != nil {
		return x.xxx_hidden_Credentials
	}
	return nil
}

func (x *WebrtcConfig) SetIceServers(v []*WebrtcConfig_IceServer) {
	x.xxx_hidden_IceServers = &v
}

func (x *WebrtcConfig) SetCredentials(v map[string]*WebrtcConfigAuth) {
	x.xxx_hidden_Credentials = v
}

type WebrtcConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	IceServers  []*WebrtcConfig_IceServer
	Credentials map[string]*WebrtcConfigAuth
}

func (b0 WebrtcConfig_builder) Build() *WebrtcConfig {
	m0 := &WebrtcConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_IceServers = &b.IceServers
	x.xxx_hidden_Credentials = b.Credentials
	return m0
}

type HttpServer struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Address     *string                `protobuf:"bytes,1,opt,name=address"`
	xxx_hidden_Auth        isHttpServer_Auth      `protobuf_oneof:"auth"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HttpServer) Reset() {
	*x = HttpServer{}
	mi := &file_networking_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpServer) ProtoMessage() {}

func (x *HttpServer) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HttpServer) GetAddress() string {
	if x != nil {
		if x.xxx_hidden_Address != nil {
			return *x.xxx_hidden_Address
		}
		return ""
	}
	return ""
}

func (x *HttpServer) GetCloudflareAuth() *HttpServer_CloudflareTunnel {
	if x != nil {
		if x, ok := x.xxx_hidden_Auth.(*httpServer_CloudflareAuth); ok {
			return x.CloudflareAuth
		}
	}
	return nil
}

func (x *HttpServer) GetOnionServiceV3Auth() *HttpServer_TorOnionServiceV3 {
	if x != nil {
		if x, ok := x.xxx_hidden_Auth.(*httpServer_OnionServiceV3Auth); ok {
			return x.OnionServiceV3Auth
		}
	}
	return nil
}

func (x *HttpServer) SetAddress(v string) {
	x.xxx_hidden_Address = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *HttpServer) SetCloudflareAuth(v *HttpServer_CloudflareTunnel) {
	if v == nil {
		x.xxx_hidden_Auth = nil
		return
	}
	x.xxx_hidden_Auth = &httpServer_CloudflareAuth{v}
}

func (x *HttpServer) SetOnionServiceV3Auth(v *HttpServer_TorOnionServiceV3) {
	if v == nil {
		x.xxx_hidden_Auth = nil
		return
	}
	x.xxx_hidden_Auth = &httpServer_OnionServiceV3Auth{v}
}

func (x *HttpServer) HasAddress() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HttpServer) HasAuth() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Auth != nil
}

func (x *HttpServer) HasCloudflareAuth() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Auth.(*httpServer_CloudflareAuth)
	return ok
}

func (x *HttpServer) HasOnionServiceV3Auth() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Auth.(*httpServer_OnionServiceV3Auth)
	return ok
}

func (x *HttpServer) ClearAddress() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Address = nil
}

func (x *HttpServer) ClearAuth() {
	x.xxx_hidden_Auth = nil
}

func (x *HttpServer) ClearCloudflareAuth() {
	if _, ok := x.xxx_hidden_Auth.(*httpServer_CloudflareAuth); ok {
		x.xxx_hidden_Auth = nil
	}
}

func (x *HttpServer) ClearOnionServiceV3Auth() {
	if _, ok := x.xxx_hidden_Auth.(*httpServer_OnionServiceV3Auth); ok {
		x.xxx_hidden_Auth = nil
	}
}

const HttpServer_Auth_not_set_case case_HttpServer_Auth = 0
const HttpServer_CloudflareAuth_case case_HttpServer_Auth = 2
const HttpServer_OnionServiceV3Auth_case case_HttpServer_Auth = 3

func (x *HttpServer) WhichAuth() case_HttpServer_Auth {
	if x == nil {
		return HttpServer_Auth_not_set_case
	}
	switch x.xxx_hidden_Auth.(type) {
	case *httpServer_CloudflareAuth:
		return HttpServer_CloudflareAuth_case
	case *httpServer_OnionServiceV3Auth:
		return HttpServer_OnionServiceV3Auth_case
	default:
		return HttpServer_Auth_not_set_case
	}
}

type HttpServer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Address *string
	// Fields of oneof xxx_hidden_Auth:
	CloudflareAuth     *HttpServer_CloudflareTunnel
	OnionServiceV3Auth *HttpServer_TorOnionServiceV3
	// -- end of xxx_hidden_Auth
}

func (b0 HttpServer_builder) Build() *HttpServer {
	m0 := &HttpServer{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Address != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Address = b.Address
	}
	if b.CloudflareAuth != nil {
		x.xxx_hidden_Auth = &httpServer_CloudflareAuth{b.CloudflareAuth}
	}
	if b.OnionServiceV3Auth != nil {
		x.xxx_hidden_Auth = &httpServer_OnionServiceV3Auth{b.OnionServiceV3Auth}
	}
	return m0
}

type case_HttpServer_Auth protoreflect.FieldNumber

func (x case_HttpServer_Auth) String() string {
	md := file_networking_proto_msgTypes[8].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isHttpServer_Auth interface {
	isHttpServer_Auth()
}

type httpServer_CloudflareAuth struct {
	CloudflareAuth *HttpServer_CloudflareTunnel `protobuf:"bytes,2,opt,name=cloudflare_auth,json=cloudflareAuth,oneof"`
}

type httpServer_OnionServiceV3Auth struct {
	OnionServiceV3Auth *HttpServer_TorOnionServiceV3 `protobuf:"bytes,3,opt,name=onion_service_v3_auth,json=onionServiceV3Auth,oneof"`
}

func (*httpServer_CloudflareAuth) isHttpServer_Auth() {}

func (*httpServer_OnionServiceV3Auth) isHttpServer_Auth() {}

type State struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data              *[]*DataChannel        `protobuf:"bytes,1,rep,name=data"`
	xxx_hidden_Media             *[]*MediaChannel       `protobuf:"bytes,2,rep,name=media"`
	xxx_hidden_WantedTracks      *[]*MediaChannel       `protobuf:"bytes,3,rep,name=wantedTracks"`
	xxx_hidden_Config            *WebrtcConfig          `protobuf:"bytes,4,opt,name=config"`
	xxx_hidden_ReconnectAttempts uint32                 `protobuf:"varint,5,opt,name=reconnectAttempts"`
	xxx_hidden_HttpServerConfig  *HttpServer            `protobuf:"bytes,6,opt,name=httpServerConfig"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *State) Reset() {
	*x = State{}
	mi := &file_networking_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *State) GetData() []*DataChannel {
	if x != nil {
		if x.xxx_hidden_Data != nil {
			return *x.xxx_hidden_Data
		}
	}
	return nil
}

func (x *State) GetMedia() []*MediaChannel {
	if x != nil {
		if x.xxx_hidden_Media != nil {
			return *x.xxx_hidden_Media
		}
	}
	return nil
}

func (x *State) GetWantedTracks() []*MediaChannel {
	if x != nil {
		if x.xxx_hidden_WantedTracks != nil {
			return *x.xxx_hidden_WantedTracks
		}
	}
	return nil
}

func (x *State) GetConfig() *WebrtcConfig {
	if x != nil {
		return x.xxx_hidden_Config
	}
	return nil
}

func (x *State) GetReconnectAttempts() uint32 {
	if x != nil {
		return x.xxx_hidden_ReconnectAttempts
	}
	return 0
}

func (x *State) GetHttpServerConfig() *HttpServer {
	if x != nil {
		return x.xxx_hidden_HttpServerConfig
	}
	return nil
}

func (x *State) SetData(v []*DataChannel) {
	x.xxx_hidden_Data = &v
}

func (x *State) SetMedia(v []*MediaChannel) {
	x.xxx_hidden_Media = &v
}

func (x *State) SetWantedTracks(v []*MediaChannel) {
	x.xxx_hidden_WantedTracks = &v
}

func (x *State) SetConfig(v *WebrtcConfig) {
	x.xxx_hidden_Config = v
}

func (x *State) SetReconnectAttempts(v uint32) {
	x.xxx_hidden_ReconnectAttempts = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *State) SetHttpServerConfig(v *HttpServer) {
	x.xxx_hidden_HttpServerConfig = v
}

func (x *State) HasConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Config != nil
}

func (x *State) HasReconnectAttempts() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *State) HasHttpServerConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_HttpServerConfig != nil
}

func (x *State) ClearConfig() {
	x.xxx_hidden_Config = nil
}

func (x *State) ClearReconnectAttempts() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ReconnectAttempts = 0
}

func (x *State) ClearHttpServerConfig() {
	x.xxx_hidden_HttpServerConfig = nil
}

type State_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Data              []*DataChannel
	Media             []*MediaChannel
	WantedTracks      []*MediaChannel
	Config            *WebrtcConfig
	ReconnectAttempts *uint32
	HttpServerConfig  *HttpServer
}

func (b0 State_builder) Build() *State {
	m0 := &State{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Data = &b.Data
	x.xxx_hidden_Media = &b.Media
	x.xxx_hidden_WantedTracks = &b.WantedTracks
	x.xxx_hidden_Config = b.Config
	if b.ReconnectAttempts != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_ReconnectAttempts = *b.ReconnectAttempts
	}
	x.xxx_hidden_HttpServerConfig = b.HttpServerConfig
	return m0
}

type Mutation struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Mutation isMutation_Mutation    `protobuf_oneof:"mutation"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Mutation) Reset() {
	*x = Mutation{}
	mi := &file_networking_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutation) ProtoMessage() {}

func (x *Mutation) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Mutation) GetData() *DataTransmission {
	if x != nil {
		if x, ok := x.xxx_hidden_Mutation.(*mutation_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *Mutation) GetSetState() *State {
	if x != nil {
		if x, ok := x.xxx_hidden_Mutation.(*mutation_SetState); ok {
			return x.SetState
		}
	}
	return nil
}

func (x *Mutation) SetData(v *DataTransmission) {
	if v == nil {
		x.xxx_hidden_Mutation = nil
		return
	}
	x.xxx_hidden_Mutation = &mutation_Data{v}
}

func (x *Mutation) SetSetState(v *State) {
	if v == nil {
		x.xxx_hidden_Mutation = nil
		return
	}
	x.xxx_hidden_Mutation = &mutation_SetState{v}
}

func (x *Mutation) HasMutation() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Mutation != nil
}

func (x *Mutation) HasData() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Mutation.(*mutation_Data)
	return ok
}

func (x *Mutation) HasSetState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Mutation.(*mutation_SetState)
	return ok
}

func (x *Mutation) ClearMutation() {
	x.xxx_hidden_Mutation = nil
}

func (x *Mutation) ClearData() {
	if _, ok := x.xxx_hidden_Mutation.(*mutation_Data); ok {
		x.xxx_hidden_Mutation = nil
	}
}

func (x *Mutation) ClearSetState() {
	if _, ok := x.xxx_hidden_Mutation.(*mutation_SetState); ok {
		x.xxx_hidden_Mutation = nil
	}
}

const Mutation_Mutation_not_set_case case_Mutation_Mutation = 0
const Mutation_Data_case case_Mutation_Mutation = 1
const Mutation_SetState_case case_Mutation_Mutation = 2

func (x *Mutation) WhichMutation() case_Mutation_Mutation {
	if x == nil {
		return Mutation_Mutation_not_set_case
	}
	switch x.xxx_hidden_Mutation.(type) {
	case *mutation_Data:
		return Mutation_Data_case
	case *mutation_SetState:
		return Mutation_SetState_case
	default:
		return Mutation_Mutation_not_set_case
	}
}

type Mutation_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Mutation:
	Data     *DataTransmission
	SetState *State
	// -- end of xxx_hidden_Mutation
}

func (b0 Mutation_builder) Build() *Mutation {
	m0 := &Mutation{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Data != nil {
		x.xxx_hidden_Mutation = &mutation_Data{b.Data}
	}
	if b.SetState != nil {
		x.xxx_hidden_Mutation = &mutation_SetState{b.SetState}
	}
	return m0
}

type case_Mutation_Mutation protoreflect.FieldNumber

func (x case_Mutation_Mutation) String() string {
	md := file_networking_proto_msgTypes[10].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isMutation_Mutation interface {
	isMutation_Mutation()
}

type mutation_Data struct {
	Data *DataTransmission `protobuf:"bytes,1,opt,name=data,oneof"`
}

type mutation_SetState struct {
	SetState *State `protobuf:"bytes,2,opt,name=setState,oneof"`
}

func (*mutation_Data) isMutation_Mutation() {}

func (*mutation_SetState) isMutation_Mutation() {}

type WebrtcConfig_IceServer struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Urls           []string               `protobuf:"bytes,1,rep,name=urls"`
	xxx_hidden_Username       *string                `protobuf:"bytes,2,opt,name=username"`
	xxx_hidden_Credential     *string                `protobuf:"bytes,3,opt,name=credential"`
	xxx_hidden_CredentialType *string                `protobuf:"bytes,4,opt,name=credentialType"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *WebrtcConfig_IceServer) Reset() {
	*x = WebrtcConfig_IceServer{}
	mi := &file_networking_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcConfig_IceServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcConfig_IceServer) ProtoMessage() {}

func (x *WebrtcConfig_IceServer) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcConfig_IceServer) GetUrls() []string {
	if x != nil {
		return x.xxx_hidden_Urls
	}
	return nil
}

func (x *WebrtcConfig_IceServer) GetUsername() string {
	if x != nil {
		if x.xxx_hidden_Username != nil {
			return *x.xxx_hidden_Username
		}
		return ""
	}
	return ""
}

func (x *WebrtcConfig_IceServer) GetCredential() string {
	if x != nil {
		if x.xxx_hidden_Credential != nil {
			return *x.xxx_hidden_Credential
		}
		return ""
	}
	return ""
}

func (x *WebrtcConfig_IceServer) GetCredentialType() string {
	if x != nil {
		if x.xxx_hidden_CredentialType != nil {
			return *x.xxx_hidden_CredentialType
		}
		return ""
	}
	return ""
}

func (x *WebrtcConfig_IceServer) SetUrls(v []string) {
	x.xxx_hidden_Urls = v
}

func (x *WebrtcConfig_IceServer) SetUsername(v string) {
	x.xxx_hidden_Username = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *WebrtcConfig_IceServer) SetCredential(v string) {
	x.xxx_hidden_Credential = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *WebrtcConfig_IceServer) SetCredentialType(v string) {
	x.xxx_hidden_CredentialType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *WebrtcConfig_IceServer) HasUsername() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *WebrtcConfig_IceServer) HasCredential() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *WebrtcConfig_IceServer) HasCredentialType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *WebrtcConfig_IceServer) ClearUsername() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Username = nil
}

func (x *WebrtcConfig_IceServer) ClearCredential() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Credential = nil
}

func (x *WebrtcConfig_IceServer) ClearCredentialType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_CredentialType = nil
}

type WebrtcConfig_IceServer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Urls           []string
	Username       *string
	Credential     *string
	CredentialType *string
}

func (b0 WebrtcConfig_IceServer_builder) Build() *WebrtcConfig_IceServer {
	m0 := &WebrtcConfig_IceServer{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Urls = b.Urls
	if b.Username != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Username = b.Username
	}
	if b.Credential != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Credential = b.Credential
	}
	if b.CredentialType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_CredentialType = b.CredentialType
	}
	return m0
}

type WebrtcConfigAuth struct {
	state           protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Auth isWebrtcConfigAuth_Auth `protobuf_oneof:"auth"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WebrtcConfigAuth) Reset() {
	*x = WebrtcConfigAuth{}
	mi := &file_networking_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcConfigAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcConfigAuth) ProtoMessage() {}

func (x *WebrtcConfigAuth) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcConfigAuth) GetCloudflareAuth() *WebrtcConfigAuth_CloudflareZeroTrust {
	if x != nil {
		if x, ok := x.xxx_hidden_Auth.(*webrtcConfigAuth_CloudflareAuth); ok {
			return x.CloudflareAuth
		}
	}
	return nil
}

func (x *WebrtcConfigAuth) GetOnionServiceV3Auth() *WebrtcConfigAuth_TorOnionServiceV3 {
	if x != nil {
		if x, ok := x.xxx_hidden_Auth.(*webrtcConfigAuth_OnionServiceV3Auth); ok {
			return x.OnionServiceV3Auth
		}
	}
	return nil
}

func (x *WebrtcConfigAuth) SetCloudflareAuth(v *WebrtcConfigAuth_CloudflareZeroTrust) {
	if v == nil {
		x.xxx_hidden_Auth = nil
		return
	}
	x.xxx_hidden_Auth = &webrtcConfigAuth_CloudflareAuth{v}
}

func (x *WebrtcConfigAuth) SetOnionServiceV3Auth(v *WebrtcConfigAuth_TorOnionServiceV3) {
	if v == nil {
		x.xxx_hidden_Auth = nil
		return
	}
	x.xxx_hidden_Auth = &webrtcConfigAuth_OnionServiceV3Auth{v}
}

func (x *WebrtcConfigAuth) HasAuth() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Auth != nil
}

func (x *WebrtcConfigAuth) HasCloudflareAuth() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Auth.(*webrtcConfigAuth_CloudflareAuth)
	return ok
}

func (x *WebrtcConfigAuth) HasOnionServiceV3Auth() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Auth.(*webrtcConfigAuth_OnionServiceV3Auth)
	return ok
}

func (x *WebrtcConfigAuth) ClearAuth() {
	x.xxx_hidden_Auth = nil
}

func (x *WebrtcConfigAuth) ClearCloudflareAuth() {
	if _, ok := x.xxx_hidden_Auth.(*webrtcConfigAuth_CloudflareAuth); ok {
		x.xxx_hidden_Auth = nil
	}
}

func (x *WebrtcConfigAuth) ClearOnionServiceV3Auth() {
	if _, ok := x.xxx_hidden_Auth.(*webrtcConfigAuth_OnionServiceV3Auth); ok {
		x.xxx_hidden_Auth = nil
	}
}

const WebrtcConfigAuth_Auth_not_set_case case_WebrtcConfigAuth_Auth = 0
const WebrtcConfigAuth_CloudflareAuth_case case_WebrtcConfigAuth_Auth = 1
const WebrtcConfigAuth_OnionServiceV3Auth_case case_WebrtcConfigAuth_Auth = 2

func (x *WebrtcConfigAuth) WhichAuth() case_WebrtcConfigAuth_Auth {
	if x == nil {
		return WebrtcConfigAuth_Auth_not_set_case
	}
	switch x.xxx_hidden_Auth.(type) {
	case *webrtcConfigAuth_CloudflareAuth:
		return WebrtcConfigAuth_CloudflareAuth_case
	case *webrtcConfigAuth_OnionServiceV3Auth:
		return WebrtcConfigAuth_OnionServiceV3Auth_case
	default:
		return WebrtcConfigAuth_Auth_not_set_case
	}
}

type WebrtcConfigAuth_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Auth:
	CloudflareAuth     *WebrtcConfigAuth_CloudflareZeroTrust
	OnionServiceV3Auth *WebrtcConfigAuth_TorOnionServiceV3
	// -- end of xxx_hidden_Auth
}

func (b0 WebrtcConfigAuth_builder) Build() *WebrtcConfigAuth {
	m0 := &WebrtcConfigAuth{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CloudflareAuth != nil {
		x.xxx_hidden_Auth = &webrtcConfigAuth_CloudflareAuth{b.CloudflareAuth}
	}
	if b.OnionServiceV3Auth != nil {
		x.xxx_hidden_Auth = &webrtcConfigAuth_OnionServiceV3Auth{b.OnionServiceV3Auth}
	}
	return m0
}

type case_WebrtcConfigAuth_Auth protoreflect.FieldNumber

func (x case_WebrtcConfigAuth_Auth) String() string {
	md := file_networking_proto_msgTypes[12].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isWebrtcConfigAuth_Auth interface {
	isWebrtcConfigAuth_Auth()
}

type webrtcConfigAuth_CloudflareAuth struct {
	CloudflareAuth *WebrtcConfigAuth_CloudflareZeroTrust `protobuf:"bytes,1,opt,name=cloudflare_auth,json=cloudflareAuth,oneof"`
}

type webrtcConfigAuth_OnionServiceV3Auth struct {
	OnionServiceV3Auth *WebrtcConfigAuth_TorOnionServiceV3 `protobuf:"bytes,2,opt,name=onion_service_v3_auth,json=onionServiceV3Auth,oneof"`
}

func (*webrtcConfigAuth_CloudflareAuth) isWebrtcConfigAuth_Auth() {}

func (*webrtcConfigAuth_OnionServiceV3Auth) isWebrtcConfigAuth_Auth() {}

type WebrtcConfigAuth_CloudflareZeroTrust struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ClientId     *string                `protobuf:"bytes,1,opt,name=client_id,json=clientId"`
	xxx_hidden_ClientSecret *string                `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) Reset() {
	*x = WebrtcConfigAuth_CloudflareZeroTrust{}
	mi := &file_networking_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcConfigAuth_CloudflareZeroTrust) ProtoMessage() {}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) GetClientId() string {
	if x != nil {
		if x.xxx_hidden_ClientId != nil {
			return *x.xxx_hidden_ClientId
		}
		return ""
	}
	return ""
}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) GetClientSecret() string {
	if x != nil {
		if x.xxx_hidden_ClientSecret != nil {
			return *x.xxx_hidden_ClientSecret
		}
		return ""
	}
	return ""
}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) SetClientId(v string) {
	x.xxx_hidden_ClientId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) SetClientSecret(v string) {
	x.xxx_hidden_ClientSecret = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) HasClientId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) HasClientSecret() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) ClearClientId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ClientId = nil
}

func (x *WebrtcConfigAuth_CloudflareZeroTrust) ClearClientSecret() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ClientSecret = nil
}

type WebrtcConfigAuth_CloudflareZeroTrust_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ClientId     *string
	ClientSecret *string
}

func (b0 WebrtcConfigAuth_CloudflareZeroTrust_builder) Build() *WebrtcConfigAuth_CloudflareZeroTrust {
	m0 := &WebrtcConfigAuth_CloudflareZeroTrust{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ClientId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_ClientId = b.ClientId
	}
	if b.ClientSecret != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_ClientSecret = b.ClientSecret
	}
	return m0
}

type WebrtcConfigAuth_TorOnionServiceV3 struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebrtcConfigAuth_TorOnionServiceV3) Reset() {
	*x = WebrtcConfigAuth_TorOnionServiceV3{}
	mi := &file_networking_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcConfigAuth_TorOnionServiceV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcConfigAuth_TorOnionServiceV3) ProtoMessage() {}

func (x *WebrtcConfigAuth_TorOnionServiceV3) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type WebrtcConfigAuth_TorOnionServiceV3_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 WebrtcConfigAuth_TorOnionServiceV3_builder) Build() *WebrtcConfigAuth_TorOnionServiceV3 {
	m0 := &WebrtcConfigAuth_TorOnionServiceV3{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type HttpServer_CloudflareTunnel struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TeamDomain  *string                `protobuf:"bytes,1,opt,name=team_domain,json=teamDomain"`
	xxx_hidden_TeamAud     *string                `protobuf:"bytes,2,opt,name=team_aud,json=teamAud"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HttpServer_CloudflareTunnel) Reset() {
	*x = HttpServer_CloudflareTunnel{}
	mi := &file_networking_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpServer_CloudflareTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpServer_CloudflareTunnel) ProtoMessage() {}

func (x *HttpServer_CloudflareTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HttpServer_CloudflareTunnel) GetTeamDomain() string {
	if x != nil {
		if x.xxx_hidden_TeamDomain != nil {
			return *x.xxx_hidden_TeamDomain
		}
		return ""
	}
	return ""
}

func (x *HttpServer_CloudflareTunnel) GetTeamAud() string {
	if x != nil {
		if x.xxx_hidden_TeamAud != nil {
			return *x.xxx_hidden_TeamAud
		}
		return ""
	}
	return ""
}

func (x *HttpServer_CloudflareTunnel) SetTeamDomain(v string) {
	x.xxx_hidden_TeamDomain = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *HttpServer_CloudflareTunnel) SetTeamAud(v string) {
	x.xxx_hidden_TeamAud = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *HttpServer_CloudflareTunnel) HasTeamDomain() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HttpServer_CloudflareTunnel) HasTeamAud() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *HttpServer_CloudflareTunnel) ClearTeamDomain() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_TeamDomain = nil
}

func (x *HttpServer_CloudflareTunnel) ClearTeamAud() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_TeamAud = nil
}

type HttpServer_CloudflareTunnel_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TeamDomain *string
	TeamAud    *string
}

func (b0 HttpServer_CloudflareTunnel_builder) Build() *HttpServer_CloudflareTunnel {
	m0 := &HttpServer_CloudflareTunnel{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TeamDomain != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_TeamDomain = b.TeamDomain
	}
	if b.TeamAud != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_TeamAud = b.TeamAud
	}
	return m0
}

type HttpServer_TorOnionServiceV3 struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_HsEd25519SecretKey []byte                 `protobuf:"bytes,1,opt,name=hs_ed25519_secret_key,json=hsEd25519SecretKey"`
	xxx_hidden_Anonymous          bool                   `protobuf:"varint,2,opt,name=anonymous"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *HttpServer_TorOnionServiceV3) Reset() {
	*x = HttpServer_TorOnionServiceV3{}
	mi := &file_networking_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpServer_TorOnionServiceV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpServer_TorOnionServiceV3) ProtoMessage() {}

func (x *HttpServer_TorOnionServiceV3) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HttpServer_TorOnionServiceV3) GetHsEd25519SecretKey() []byte {
	if x != nil {
		return x.xxx_hidden_HsEd25519SecretKey
	}
	return nil
}

func (x *HttpServer_TorOnionServiceV3) GetAnonymous() bool {
	if x != nil {
		return x.xxx_hidden_Anonymous
	}
	return false
}

func (x *HttpServer_TorOnionServiceV3) SetHsEd25519SecretKey(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_HsEd25519SecretKey = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *HttpServer_TorOnionServiceV3) SetAnonymous(v bool) {
	x.xxx_hidden_Anonymous = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *HttpServer_TorOnionServiceV3) HasHsEd25519SecretKey() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HttpServer_TorOnionServiceV3) HasAnonymous() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *HttpServer_TorOnionServiceV3) ClearHsEd25519SecretKey() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_HsEd25519SecretKey = nil
}

func (x *HttpServer_TorOnionServiceV3) ClearAnonymous() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Anonymous = false
}

type HttpServer_TorOnionServiceV3_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	HsEd25519SecretKey []byte
	Anonymous          *bool
}

func (b0 HttpServer_TorOnionServiceV3_builder) Build() *HttpServer_TorOnionServiceV3 {
	m0 := &HttpServer_TorOnionServiceV3{}
	b, x := &b0, m0
	_, _ = b, x
	if b.HsEd25519SecretKey != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_HsEd25519SecretKey = b.HsEd25519SecretKey
	}
	if b.Anonymous != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Anonymous = *b.Anonymous
	}
	return m0
}

var File_networking_proto protoreflect.FileDescriptor

var file_networking_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x61,
	0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xbe, 0x02, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x45, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x10, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0c, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x72, 0x63, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x72, 0x63, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0xd0,
	0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x74, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x74, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x74, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x49, 0x43, 0x45, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x41,
	0x0a, 0x07, 0x49, 0x43, 0x45, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x72, 0x66, 0x6c, 0x78, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x72, 0x66, 0x6c, 0x78, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x10,
	0x04, 0x22, 0xdc, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0xc8, 0x05, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x43, 0x0a, 0x0b, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x1a, 0x83, 0x01, 0x0a, 0x09, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xc0, 0x02, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x5c, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x66, 0x6c, 0x61, 0x72, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x64, 0x0a, 0x15, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x76, 0x33, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54,
	0x6f, 0x72, 0x4f, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x33,
	0x48, 0x00, 0x52, 0x12, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x33, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x57, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66,
	0x6c, 0x61, 0x72, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a,
	0x13, 0x0a, 0x11, 0x54, 0x6f, 0x72, 0x4f, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x33, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x5d, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x57,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x03, 0x0a, 0x0a,
	0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61,
	0x72, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66,
	0x6c, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x15, 0x6f, 0x6e, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x33, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x6f, 0x72, 0x4f, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x33, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x33, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x4e, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x66, 0x6c, 0x61, 0x72, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x75, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x1a, 0x64, 0x0a, 0x11, 0x54, 0x6f, 0x72, 0x4f, 0x6e,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x33, 0x12, 0x31, 0x0a, 0x15,
	0x68, 0x73, 0x5f, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x68, 0x73, 0x45,
	0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xc6, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x3c, 0x0a, 0x0c,
	0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0c, 0x77, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x11,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x68, 0x74,
	0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x68, 0x74,
	0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7b,
	0x0a, 0x08, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x45, 0x0a, 0x0b, 0x57,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x68, 0x7a, 0x68, 0x6f, 0x75, 0x30, 0x2f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x2d, 0x6e, 0x6f,
	0x64, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x3b, 0x70, 0x62, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x70, 0xe8, 0x07,
})

var file_networking_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_networking_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_networking_proto_goTypes = []any{
	(Stats_ICEType)(0),             // 0: networking.Stats.ICEType
	(*NamedTrack)(nil),             // 1: networking.NamedTrack
	(*WebrtcOffer)(nil),            // 2: networking.WebrtcOffer
	(*DataChannel)(nil),            // 3: networking.DataChannel
	(*DataTransmission)(nil),       // 4: networking.DataTransmission
	(*MediaChannel)(nil),           // 5: networking.MediaChannel
	(*Stats)(nil),                  // 6: networking.Stats
	(*Event)(nil),                  // 7: networking.Event
	(*WebrtcConfig)(nil),           // 8: networking.WebrtcConfig
	(*HttpServer)(nil),             // 9: networking.HttpServer
	(*State)(nil),                  // 10: networking.State
	(*Mutation)(nil),               // 11: networking.Mutation
	(*WebrtcConfig_IceServer)(nil), // 12: networking.WebrtcConfig.IceServer
	(*WebrtcConfigAuth)(nil),       // 13: networking.WebrtcConfig.auth
	nil,                            // 14: networking.WebrtcConfig.CredentialsEntry
	(*WebrtcConfigAuth_CloudflareZeroTrust)(nil), // 15: networking.WebrtcConfig.auth.CloudflareZeroTrust
	(*WebrtcConfigAuth_TorOnionServiceV3)(nil),   // 16: networking.WebrtcConfig.auth.TorOnionServiceV3
	(*HttpServer_CloudflareTunnel)(nil),          // 17: networking.HttpServer.CloudflareTunnel
	(*HttpServer_TorOnionServiceV3)(nil),         // 18: networking.HttpServer.TorOnionServiceV3
}
var file_networking_proto_depIdxs = []int32{
	1,  // 0: networking.WebrtcOffer.local_tracks:type_name -> networking.NamedTrack
	1,  // 1: networking.WebrtcOffer.remote_tracks:type_name -> networking.NamedTrack
	3,  // 2: networking.DataTransmission.channel:type_name -> networking.DataChannel
	1,  // 3: networking.MediaChannel.track:type_name -> networking.NamedTrack
	0,  // 4: networking.Stats.type:type_name -> networking.Stats.ICEType
	4,  // 5: networking.Event.data:type_name -> networking.DataTransmission
	5,  // 6: networking.Event.media:type_name -> networking.MediaChannel
	10, // 7: networking.Event.achievedState:type_name -> networking.State
	6,  // 8: networking.Event.stats:type_name -> networking.Stats
	12, // 9: networking.WebrtcConfig.ice_servers:type_name -> networking.WebrtcConfig.IceServer
	14, // 10: networking.WebrtcConfig.credentials:type_name -> networking.WebrtcConfig.CredentialsEntry
	17, // 11: networking.HttpServer.cloudflare_auth:type_name -> networking.HttpServer.CloudflareTunnel
	18, // 12: networking.HttpServer.onion_service_v3_auth:type_name -> networking.HttpServer.TorOnionServiceV3
	3,  // 13: networking.State.data:type_name -> networking.DataChannel
	5,  // 14: networking.State.media:type_name -> networking.MediaChannel
	5,  // 15: networking.State.wantedTracks:type_name -> networking.MediaChannel
	8,  // 16: networking.State.config:type_name -> networking.WebrtcConfig
	9,  // 17: networking.State.httpServerConfig:type_name -> networking.HttpServer
	4,  // 18: networking.Mutation.data:type_name -> networking.DataTransmission
	10, // 19: networking.Mutation.setState:type_name -> networking.State
	15, // 20: networking.WebrtcConfig.auth.cloudflare_auth:type_name -> networking.WebrtcConfig.auth.CloudflareZeroTrust
	16, // 21: networking.WebrtcConfig.auth.onion_service_v3_auth:type_name -> networking.WebrtcConfig.auth.TorOnionServiceV3
	13, // 22: networking.WebrtcConfig.CredentialsEntry.value:type_name -> networking.WebrtcConfig.auth
	11, // 23: networking.WebrtcProxy.Connect:input_type -> networking.Mutation
	7,  // 24: networking.WebrtcProxy.Connect:output_type -> networking.Event
	24, // [24:25] is the sub-list for method output_type
	23, // [23:24] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_networking_proto_init() }
func file_networking_proto_init() {
	if File_networking_proto != nil {
		return
	}
	file_networking_proto_msgTypes[6].OneofWrappers = []any{
		(*event_Data)(nil),
		(*event_Media)(nil),
		(*event_AchievedState)(nil),
		(*event_Stats)(nil),
	}
	file_networking_proto_msgTypes[8].OneofWrappers = []any{
		(*httpServer_CloudflareAuth)(nil),
		(*httpServer_OnionServiceV3Auth)(nil),
	}
	file_networking_proto_msgTypes[10].OneofWrappers = []any{
		(*mutation_Data)(nil),
		(*mutation_SetState)(nil),
	}
	file_networking_proto_msgTypes[12].OneofWrappers = []any{
		(*webrtcConfigAuth_CloudflareAuth)(nil),
		(*webrtcConfigAuth_OnionServiceV3Auth)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_networking_proto_rawDesc), len(file_networking_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_networking_proto_goTypes,
		DependencyIndexes: file_networking_proto_depIdxs,
		EnumInfos:         file_networking_proto_enumTypes,
		MessageInfos:      file_networking_proto_msgTypes,
	}.Build()
	File_networking_proto = out.File
	file_networking_proto_goTypes = nil
	file_networking_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: networking.proto

package ipc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NamedTrack struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TrackId     *string                `protobuf:"bytes,1,opt,name=track_id,json=trackId"`
	xxx_hidden_StreamId    *string                `protobuf:"bytes,2,opt,name=stream_id,json=streamId"`
	xxx_hidden_MimeType    *string                `protobuf:"bytes,3,opt,name=mime_type,json=mimeType"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NamedTrack) Reset() {
	*x = NamedTrack{}
	mi := &file_networking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedTrack) ProtoMessage() {}

func (x *NamedTrack) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NamedTrack) GetTrackId() string {
	if x != nil {
		if x.xxx_hidden_TrackId != nil {
			return *x.xxx_hidden_TrackId
		}
		return ""
	}
	return ""
}

func (x *NamedTrack) GetStreamId() string {
	if x != nil {
		if x.xxx_hidden_StreamId != nil {
			return *x.xxx_hidden_StreamId
		}
		return ""
	}
	return ""
}

func (x *NamedTrack) GetMimeType() string {
	if x != nil {
		if x.xxx_hidden_MimeType != nil {
			return *x.xxx_hidden_MimeType
		}
		return ""
	}
	return ""
}

func (x *NamedTrack) SetTrackId(v string) {
	x.xxx_hidden_TrackId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *NamedTrack) SetStreamId(v string) {
	x.xxx_hidden_StreamId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *NamedTrack) SetMimeType(v string) {
	x.xxx_hidden_MimeType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *NamedTrack) HasTrackId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *NamedTrack) HasStreamId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *NamedTrack) HasMimeType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *NamedTrack) ClearTrackId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_TrackId = nil
}

func (x *NamedTrack) ClearStreamId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_StreamId = nil
}

func (x *NamedTrack) ClearMimeType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_MimeType = nil
}

type NamedTrack_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TrackId  *string
	StreamId *string
	MimeType *string
}

func (b0 NamedTrack_builder) Build() *NamedTrack {
	m0 := &NamedTrack{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TrackId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_TrackId = b.TrackId
	}
	if b.StreamId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_StreamId = b.StreamId
	}
	if b.MimeType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_MimeType = b.MimeType
	}
	return m0
}

// uuid can be any string that uniquely identifies the sender/receiver. No specific format required.
// Define the transmitter (T) as the side with a dest_uuid (in either Data or Media Transmission) that refers to the broadcaster (B).
// In the case that both sides have specified dest_uuid that refer to each other, the side that initiates first is T.
// Offer negotiations is as follows:
// 1. T -> T's Media -> B (Request)
// 2. B -> Wanted T's Media, B's Media -> T (Response)
// 3. T -> Wanted B's Media, Wanted T's Media, SDP offer, type -> B (Request)
// 4. B -> Wanted B's Media, Wanted T's Media, SDP answer, type -> T (Response)
// 5. Connection Established. T -> Wanted T's Media -> B; B -> Wanted B's Media -> T
type WebrtcOffer struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SrcUuid         *string                `protobuf:"bytes,1,opt,name=src_uuid,json=srcUuid"`
	xxx_hidden_Sdp             *string                `protobuf:"bytes,2,opt,name=sdp"`
	xxx_hidden_Type            *string                `protobuf:"bytes,3,opt,name=type"`
	xxx_hidden_LocalTracks     *[]*NamedTrack         `protobuf:"bytes,4,rep,name=local_tracks,json=localTracks"`
	xxx_hidden_LocalTracksSet  bool                   `protobuf:"varint,5,opt,name=local_tracks_set,json=localTracksSet"`
	xxx_hidden_RemoteTracks    *[]*NamedTrack         `protobuf:"bytes,6,rep,name=remote_tracks,json=remoteTracks"`
	xxx_hidden_RemoteTracksSet bool                   `protobuf:"varint,7,opt,name=remote_tracks_set,json=remoteTracksSet"`
	xxx_hidden_Datachannel     bool                   `protobuf:"varint,8,opt,name=datachannel"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *WebrtcOffer) Reset() {
	*x = WebrtcOffer{}
	mi := &file_networking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcOffer) ProtoMessage() {}

func (x *WebrtcOffer) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcOffer) GetSrcUuid() string {
	if x != nil {
		if x.xxx_hidden_SrcUuid != nil {
			return *x.xxx_hidden_SrcUuid
		}
		return ""
	}
	return ""
}

func (x *WebrtcOffer) GetSdp() string {
	if x != nil {
		if x.xxx_hidden_Sdp != nil {
			return *x.xxx_hidden_Sdp
		}
		return ""
	}
	return ""
}

func (x *WebrtcOffer) GetType() string {
	if x != nil {
		if x.xxx_hidden_Type != nil {
			return *x.xxx_hidden_Type
		}
		return ""
	}
	return ""
}

func (x *WebrtcOffer) GetLocalTracks() []*NamedTrack {
	if x != nil {
		if x.xxx_hidden_LocalTracks != nil {
			return *x.xxx_hidden_LocalTracks
		}
	}
	return nil
}

func (x *WebrtcOffer) GetLocalTracksSet() bool {
	if x != nil {
		return x.xxx_hidden_LocalTracksSet
	}
	return false
}

func (x *WebrtcOffer) GetRemoteTracks() []*NamedTrack {
	if x != nil {
		if x.xxx_hidden_RemoteTracks != nil {
			return *x.xxx_hidden_RemoteTracks
		}
	}
	return nil
}

func (x *WebrtcOffer) GetRemoteTracksSet() bool {
	if x != nil {
		return x.xxx_hidden_RemoteTracksSet
	}
	return false
}

func (x *WebrtcOffer) GetDatachannel() bool {
	if x != nil {
		return x.xxx_hidden_Datachannel
	}
	return false
}

func (x *WebrtcOffer) SetSrcUuid(v string) {
	x.xxx_hidden_SrcUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *WebrtcOffer) SetSdp(v string) {
	x.xxx_hidden_Sdp = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 8)
}

func (x *WebrtcOffer) SetType(v string) {
	x.xxx_hidden_Type = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *WebrtcOffer) SetLocalTracks(v []*NamedTrack) {
	x.xxx_hidden_LocalTracks = &v
}

func (x *WebrtcOffer) SetLocalTracksSet(v bool) {
	x.xxx_hidden_LocalTracksSet = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 8)
}

func (x *WebrtcOffer) SetRemoteTracks(v []*NamedTrack) {
	x.xxx_hidden_RemoteTracks = &v
}

func (x *WebrtcOffer) SetRemoteTracksSet(v bool) {
	x.xxx_hidden_RemoteTracksSet = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 8)
}

func (x *WebrtcOffer) SetDatachannel(v bool) {
	x.xxx_hidden_Datachannel = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 8)
}

func (x *WebrtcOffer) HasSrcUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WebrtcOffer) HasSdp() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *WebrtcOffer) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *WebrtcOffer) HasLocalTracksSet() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *WebrtcOffer) HasRemoteTracksSet() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *WebrtcOffer) HasDatachannel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *WebrtcOffer) ClearSrcUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SrcUuid = nil
}

func (x *WebrtcOffer) ClearSdp() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Sdp = nil
}

func (x *WebrtcOffer) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Type = nil
}

func (x *WebrtcOffer) ClearLocalTracksSet() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_LocalTracksSet = false
}

func (x *WebrtcOffer) ClearRemoteTracksSet() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_RemoteTracksSet = false
}

func (x *WebrtcOffer) ClearDatachannel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Datachannel = false
}

type WebrtcOffer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SrcUuid         *string
	Sdp             *string
	Type            *string
	LocalTracks     []*NamedTrack
	LocalTracksSet  *bool
	RemoteTracks    []*NamedTrack
	RemoteTracksSet *bool
	Datachannel     *bool
}

func (b0 WebrtcOffer_builder) Build() *WebrtcOffer {
	m0 := &WebrtcOffer{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SrcUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_SrcUuid = b.SrcUuid
	}
	if b.Sdp != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 8)
		x.xxx_hidden_Sdp = b.Sdp
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_Type = b.Type
	}
	x.xxx_hidden_LocalTracks = &b.LocalTracks
	if b.LocalTracksSet != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 8)
		x.xxx_hidden_LocalTracksSet = *b.LocalTracksSet
	}
	x.xxx_hidden_RemoteTracks = &b.RemoteTracks
	if b.RemoteTracksSet != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 8)
		x.xxx_hidden_RemoteTracksSet = *b.RemoteTracksSet
	}
	if b.Datachannel != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 8)
		x.xxx_hidden_Datachannel = *b.Datachannel
	}
	return m0
}

type DataChannel struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SrcUuid     *string                `protobuf:"bytes,1,opt,name=src_uuid,json=srcUuid"`
	xxx_hidden_DestUuid    *string                `protobuf:"bytes,2,opt,name=dest_uuid,json=destUuid"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DataChannel) Reset() {
	*x = DataChannel{}
	mi := &file_networking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChannel) ProtoMessage() {}

func (x *DataChannel) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DataChannel) GetSrcUuid() string {
	if x != nil {
		if x.xxx_hidden_SrcUuid != nil {
			return *x.xxx_hidden_SrcUuid
		}
		return ""
	}
	return ""
}

func (x *DataChannel) GetDestUuid() string {
	if x != nil {
		if x.xxx_hidden_DestUuid != nil {
			return *x.xxx_hidden_DestUuid
		}
		return ""
	}
	return ""
}

func (x *DataChannel) SetSrcUuid(v string) {
	x.xxx_hidden_SrcUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *DataChannel) SetDestUuid(v string) {
	x.xxx_hidden_DestUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DataChannel) HasSrcUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DataChannel) HasDestUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DataChannel) ClearSrcUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SrcUuid = nil
}

func (x *DataChannel) ClearDestUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_DestUuid = nil
}

type DataChannel_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SrcUuid  *string
	DestUuid *string
}

func (b0 DataChannel_builder) Build() *DataChannel {
	m0 := &DataChannel{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SrcUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_SrcUuid = b.SrcUuid
	}
	if b.DestUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_DestUuid = b.DestUuid
	}
	return m0
}

type DataTransmission struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Channel     *DataChannel           `protobuf:"bytes,1,opt,name=channel"`
	xxx_hidden_Payload     []byte                 `protobuf:"bytes,2,opt,name=payload"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DataTransmission) Reset() {
	*x = DataTransmission{}
	mi := &file_networking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataTransmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransmission) ProtoMessage() {}

func (x *DataTransmission) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DataTransmission) GetChannel() *DataChannel {
	if x != nil {
		return x.xxx_hidden_Channel
	}
	return nil
}

func (x *DataTransmission) GetPayload() []byte {
	if x != nil {
		return x.xxx_hidden_Payload
	}
	return nil
}

func (x *DataTransmission) SetChannel(v *DataChannel) {
	x.xxx_hidden_Channel = v
}

func (x *DataTransmission) SetPayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Payload = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *DataTransmission) HasChannel() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Channel != nil
}

func (x *DataTransmission) HasPayload() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DataTransmission) ClearChannel() {
	x.xxx_hidden_Channel = nil
}

func (x *DataTransmission) ClearPayload() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Payload = nil
}

type DataTransmission_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Channel *DataChannel
	Payload []byte
}

func (b0 DataTransmission_builder) Build() *DataTransmission {
	m0 := &DataTransmission{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Channel = b.Channel
	if b.Payload != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Payload = b.Payload
	}
	return m0
}

type MediaChannel struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SrcUuid     *string                `protobuf:"bytes,1,opt,name=src_uuid,json=srcUuid"`
	xxx_hidden_DestUuid    *string                `protobuf:"bytes,2,opt,name=dest_uuid,json=destUuid"`
	xxx_hidden_Track       *NamedTrack            `protobuf:"bytes,3,opt,name=track"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MediaChannel) Reset() {
	*x = MediaChannel{}
	mi := &file_networking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaChannel) ProtoMessage() {}

func (x *MediaChannel) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MediaChannel) GetSrcUuid() string {
	if x != nil {
		if x.xxx_hidden_SrcUuid != nil {
			return *x.xxx_hidden_SrcUuid
		}
		return ""
	}
	return ""
}

func (x *MediaChannel) GetDestUuid() string {
	if x != nil {
		if x.xxx_hidden_DestUuid != nil {
			return *x.xxx_hidden_DestUuid
		}
		return ""
	}
	return ""
}

func (x *MediaChannel) GetTrack() *NamedTrack {
	if x != nil {
		return x.xxx_hidden_Track
	}
	return nil
}

func (x *MediaChannel) SetSrcUuid(v string) {
	x.xxx_hidden_SrcUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *MediaChannel) SetDestUuid(v string) {
	x.xxx_hidden_DestUuid = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *MediaChannel) SetTrack(v *NamedTrack) {
	x.xxx_hidden_Track = v
}

func (x *MediaChannel) HasSrcUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *MediaChannel) HasDestUuid() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *MediaChannel) HasTrack() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Track != nil
}

func (x *MediaChannel) ClearSrcUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SrcUuid = nil
}

func (x *MediaChannel) ClearDestUuid() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_DestUuid = nil
}

func (x *MediaChannel) ClearTrack() {
	x.xxx_hidden_Track = nil
}

type MediaChannel_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SrcUuid  *string
	DestUuid *string
	// When sent from the kernel, this will be fulfilled on a best-effort basis. The dest can reject any track it doesn't want.
	Track *NamedTrack
}

func (b0 MediaChannel_builder) Build() *MediaChannel {
	m0 := &MediaChannel{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SrcUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_SrcUuid = b.SrcUuid
	}
	if b.DestUuid != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_DestUuid = b.DestUuid
	}
	x.xxx_hidden_Track = b.Track
	return m0
}

type Event struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data          *DataTransmission      `protobuf:"bytes,1,opt,name=data"`
	xxx_hidden_Media         *MediaChannel          `protobuf:"bytes,2,opt,name=media"`
	xxx_hidden_AchievedState *State                 `protobuf:"bytes,3,opt,name=achievedState"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_networking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Event) GetData() *DataTransmission {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *Event) GetMedia() *MediaChannel {
	if x != nil {
		return x.xxx_hidden_Media
	}
	return nil
}

func (x *Event) GetAchievedState() *State {
	if x != nil {
		return x.xxx_hidden_AchievedState
	}
	return nil
}

func (x *Event) SetData(v *DataTransmission) {
	x.xxx_hidden_Data = v
}

func (x *Event) SetMedia(v *MediaChannel) {
	x.xxx_hidden_Media = v
}

func (x *Event) SetAchievedState(v *State) {
	x.xxx_hidden_AchievedState = v
}

func (x *Event) HasData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data != nil
}

func (x *Event) HasMedia() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Media != nil
}

func (x *Event) HasAchievedState() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_AchievedState != nil
}

func (x *Event) ClearData() {
	x.xxx_hidden_Data = nil
}

func (x *Event) ClearMedia() {
	x.xxx_hidden_Media = nil
}

func (x *Event) ClearAchievedState() {
	x.xxx_hidden_AchievedState = nil
}

type Event_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Data          *DataTransmission
	Media         *MediaChannel
	AchievedState *State
}

func (b0 Event_builder) Build() *Event {
	m0 := &Event{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Data = b.Data
	x.xxx_hidden_Media = b.Media
	x.xxx_hidden_AchievedState = b.AchievedState
	return m0
}

type WebrtcConfig struct {
	state                 protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_IceServers *[]*WebrtcConfig_IceServer `protobuf:"bytes,1,rep,name=ice_servers,json=iceServers"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *WebrtcConfig) Reset() {
	*x = WebrtcConfig{}
	mi := &file_networking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcConfig) ProtoMessage() {}

func (x *WebrtcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcConfig) GetIceServers() []*WebrtcConfig_IceServer {
	if x != nil {
		if x.xxx_hidden_IceServers != nil {
			return *x.xxx_hidden_IceServers
		}
	}
	return nil
}

func (x *WebrtcConfig) SetIceServers(v []*WebrtcConfig_IceServer) {
	x.xxx_hidden_IceServers = &v
}

type WebrtcConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	IceServers []*WebrtcConfig_IceServer
}

func (b0 WebrtcConfig_builder) Build() *WebrtcConfig {
	m0 := &WebrtcConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_IceServers = &b.IceServers
	return m0
}

type State struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data              *[]*DataChannel        `protobuf:"bytes,1,rep,name=data"`
	xxx_hidden_Media             *[]*MediaChannel       `protobuf:"bytes,2,rep,name=media"`
	xxx_hidden_WantedTracks      *[]*NamedTrack         `protobuf:"bytes,3,rep,name=wantedTracks"`
	xxx_hidden_Config            *WebrtcConfig          `protobuf:"bytes,4,opt,name=config"`
	xxx_hidden_ReconnectAttempts uint32                 `protobuf:"varint,5,opt,name=reconnectAttempts"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *State) Reset() {
	*x = State{}
	mi := &file_networking_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *State) GetData() []*DataChannel {
	if x != nil {
		if x.xxx_hidden_Data != nil {
			return *x.xxx_hidden_Data
		}
	}
	return nil
}

func (x *State) GetMedia() []*MediaChannel {
	if x != nil {
		if x.xxx_hidden_Media != nil {
			return *x.xxx_hidden_Media
		}
	}
	return nil
}

func (x *State) GetWantedTracks() []*NamedTrack {
	if x != nil {
		if x.xxx_hidden_WantedTracks != nil {
			return *x.xxx_hidden_WantedTracks
		}
	}
	return nil
}

func (x *State) GetConfig() *WebrtcConfig {
	if x != nil {
		return x.xxx_hidden_Config
	}
	return nil
}

func (x *State) GetReconnectAttempts() uint32 {
	if x != nil {
		return x.xxx_hidden_ReconnectAttempts
	}
	return 0
}

func (x *State) SetData(v []*DataChannel) {
	x.xxx_hidden_Data = &v
}

func (x *State) SetMedia(v []*MediaChannel) {
	x.xxx_hidden_Media = &v
}

func (x *State) SetWantedTracks(v []*NamedTrack) {
	x.xxx_hidden_WantedTracks = &v
}

func (x *State) SetConfig(v *WebrtcConfig) {
	x.xxx_hidden_Config = v
}

func (x *State) SetReconnectAttempts(v uint32) {
	x.xxx_hidden_ReconnectAttempts = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *State) HasConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Config != nil
}

func (x *State) HasReconnectAttempts() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *State) ClearConfig() {
	x.xxx_hidden_Config = nil
}

func (x *State) ClearReconnectAttempts() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ReconnectAttempts = 0
}

type State_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Data              []*DataChannel
	Media             []*MediaChannel
	WantedTracks      []*NamedTrack
	Config            *WebrtcConfig
	ReconnectAttempts *uint32
}

func (b0 State_builder) Build() *State {
	m0 := &State{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Data = &b.Data
	x.xxx_hidden_Media = &b.Media
	x.xxx_hidden_WantedTracks = &b.WantedTracks
	x.xxx_hidden_Config = b.Config
	if b.ReconnectAttempts != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_ReconnectAttempts = *b.ReconnectAttempts
	}
	return m0
}

type Mutation struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data     *DataTransmission      `protobuf:"bytes,1,opt,name=data"`
	xxx_hidden_SetState *State                 `protobuf:"bytes,2,opt,name=setState"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Mutation) Reset() {
	*x = Mutation{}
	mi := &file_networking_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutation) ProtoMessage() {}

func (x *Mutation) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Mutation) GetData() *DataTransmission {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *Mutation) GetSetState() *State {
	if x != nil {
		return x.xxx_hidden_SetState
	}
	return nil
}

func (x *Mutation) SetData(v *DataTransmission) {
	x.xxx_hidden_Data = v
}

func (x *Mutation) SetSetState(v *State) {
	x.xxx_hidden_SetState = v
}

func (x *Mutation) HasData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data != nil
}

func (x *Mutation) HasSetState() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_SetState != nil
}

func (x *Mutation) ClearData() {
	x.xxx_hidden_Data = nil
}

func (x *Mutation) ClearSetState() {
	x.xxx_hidden_SetState = nil
}

type Mutation_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Data     *DataTransmission
	SetState *State
}

func (b0 Mutation_builder) Build() *Mutation {
	m0 := &Mutation{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Data = b.Data
	x.xxx_hidden_SetState = b.SetState
	return m0
}

type WebrtcConfig_IceServer struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Urls           []string               `protobuf:"bytes,1,rep,name=urls"`
	xxx_hidden_Username       *string                `protobuf:"bytes,2,opt,name=username"`
	xxx_hidden_Credential     *string                `protobuf:"bytes,3,opt,name=credential"`
	xxx_hidden_CredentialType *string                `protobuf:"bytes,4,opt,name=credentialType"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *WebrtcConfig_IceServer) Reset() {
	*x = WebrtcConfig_IceServer{}
	mi := &file_networking_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebrtcConfig_IceServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcConfig_IceServer) ProtoMessage() {}

func (x *WebrtcConfig_IceServer) ProtoReflect() protoreflect.Message {
	mi := &file_networking_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebrtcConfig_IceServer) GetUrls() []string {
	if x != nil {
		return x.xxx_hidden_Urls
	}
	return nil
}

func (x *WebrtcConfig_IceServer) GetUsername() string {
	if x != nil {
		if x.xxx_hidden_Username != nil {
			return *x.xxx_hidden_Username
		}
		return ""
	}
	return ""
}

func (x *WebrtcConfig_IceServer) GetCredential() string {
	if x != nil {
		if x.xxx_hidden_Credential != nil {
			return *x.xxx_hidden_Credential
		}
		return ""
	}
	return ""
}

func (x *WebrtcConfig_IceServer) GetCredentialType() string {
	if x != nil {
		if x.xxx_hidden_CredentialType != nil {
			return *x.xxx_hidden_CredentialType
		}
		return ""
	}
	return ""
}

func (x *WebrtcConfig_IceServer) SetUrls(v []string) {
	x.xxx_hidden_Urls = v
}

func (x *WebrtcConfig_IceServer) SetUsername(v string) {
	x.xxx_hidden_Username = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *WebrtcConfig_IceServer) SetCredential(v string) {
	x.xxx_hidden_Credential = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *WebrtcConfig_IceServer) SetCredentialType(v string) {
	x.xxx_hidden_CredentialType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *WebrtcConfig_IceServer) HasUsername() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *WebrtcConfig_IceServer) HasCredential() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *WebrtcConfig_IceServer) HasCredentialType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *WebrtcConfig_IceServer) ClearUsername() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Username = nil
}

func (x *WebrtcConfig_IceServer) ClearCredential() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Credential = nil
}

func (x *WebrtcConfig_IceServer) ClearCredentialType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_CredentialType = nil
}

type WebrtcConfig_IceServer_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Urls           []string
	Username       *string
	Credential     *string
	CredentialType *string
}

func (b0 WebrtcConfig_IceServer_builder) Build() *WebrtcConfig_IceServer {
	m0 := &WebrtcConfig_IceServer{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Urls = b.Urls
	if b.Username != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Username = b.Username
	}
	if b.Credential != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Credential = b.Credential
	}
	if b.CredentialType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_CredentialType = b.CredentialType
	}
	return m0
}

var File_networking_proto protoreflect.FileDescriptor

var file_networking_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x61,
	0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xbe, 0x02, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x45, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x10, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x74, 0x0a, 0x0c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72,
	0x63, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72,
	0x63, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x22, 0xa2, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x37, 0x0a, 0x0d,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x0b, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x83, 0x01, 0x0a, 0x09,
	0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x80, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x3a, 0x0a, 0x0c, 0x77, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x22, 0x6b, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x68, 0x7a, 0x68, 0x6f, 0x75, 0x30, 0x2f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x2d, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x3b, 0x69, 0x70, 0x63, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x70, 0xe8, 0x07,
})

var file_networking_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_networking_proto_goTypes = []any{
	(*NamedTrack)(nil),             // 0: networking.NamedTrack
	(*WebrtcOffer)(nil),            // 1: networking.WebrtcOffer
	(*DataChannel)(nil),            // 2: networking.DataChannel
	(*DataTransmission)(nil),       // 3: networking.DataTransmission
	(*MediaChannel)(nil),           // 4: networking.MediaChannel
	(*Event)(nil),                  // 5: networking.Event
	(*WebrtcConfig)(nil),           // 6: networking.WebrtcConfig
	(*State)(nil),                  // 7: networking.State
	(*Mutation)(nil),               // 8: networking.Mutation
	(*WebrtcConfig_IceServer)(nil), // 9: networking.WebrtcConfig.IceServer
}
var file_networking_proto_depIdxs = []int32{
	0,  // 0: networking.WebrtcOffer.local_tracks:type_name -> networking.NamedTrack
	0,  // 1: networking.WebrtcOffer.remote_tracks:type_name -> networking.NamedTrack
	2,  // 2: networking.DataTransmission.channel:type_name -> networking.DataChannel
	0,  // 3: networking.MediaChannel.track:type_name -> networking.NamedTrack
	3,  // 4: networking.Event.data:type_name -> networking.DataTransmission
	4,  // 5: networking.Event.media:type_name -> networking.MediaChannel
	7,  // 6: networking.Event.achievedState:type_name -> networking.State
	9,  // 7: networking.WebrtcConfig.ice_servers:type_name -> networking.WebrtcConfig.IceServer
	2,  // 8: networking.State.data:type_name -> networking.DataChannel
	4,  // 9: networking.State.media:type_name -> networking.MediaChannel
	0,  // 10: networking.State.wantedTracks:type_name -> networking.NamedTrack
	6,  // 11: networking.State.config:type_name -> networking.WebrtcConfig
	3,  // 12: networking.Mutation.data:type_name -> networking.DataTransmission
	7,  // 13: networking.Mutation.setState:type_name -> networking.State
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_networking_proto_init() }
func file_networking_proto_init() {
	if File_networking_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_networking_proto_rawDesc), len(file_networking_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_networking_proto_goTypes,
		DependencyIndexes: file_networking_proto_depIdxs,
		MessageInfos:      file_networking_proto_msgTypes,
	}.Build()
	File_networking_proto = out.File
	file_networking_proto_goTypes = nil
	file_networking_proto_depIdxs = nil
}
